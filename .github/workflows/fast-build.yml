name: 🚀 Ultra-Fast OpenWrt Build for Raspberry Pi 4

on:
  # Auto trigger on push to main branch
  push:
    branches:
      - main
    # Trigger on any important file changes
    paths:
      - '.github/workflows/fast-build.yml'
      - '.config'
      - 'files/**'
      - '*.md'  # Documentation changes
      - 'scripts/**'  # Script changes

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore cache)'
        required: false
        default: 'false'
        type: boolean
      build_target:
        description: 'Build target (optional)'
        required: false
        default: 'bcm27xx/bcm2711'
        type: string

  # Auto trigger on schedule (weekly)
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

env:
  OPENWRT_BRANCH: "master"
  CACHE_VERSION: "v4"  # Updated cache version for faster builds
  CCACHE_SIZE: "4G"  # Increased ccache size

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          gh --version || echo "GitHub CLI not found, installing..."
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Enhanced caching strategy for maximum performance
      - name: Cache OpenWrt Source
        id: cache-source
        uses: actions/cache@v4
        with:
          path: openwrt
          key: ${{ runner.os }}-openwrt-source-master-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-openwrt-source-master-
            ${{ runner.os }}-openwrt-source-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ env.CACHE_VERSION }}-${{ hashFiles('.config') }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-ccache-

      - name: Cache Build Tools & Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            /var/cache/apt
            ~/apt-cache
          key: ${{ runner.os }}-build-tools-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-tools-

      - name: Cache Downloaded Packages
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-dl-${{ hashFiles('.config') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-dl-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-dl-

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget ccache

      # Setup ccache for faster compilation
      - name: Setup ccache
        run: |
          mkdir -p ~/.ccache
          echo 'export PATH="/usr/lib/ccache:$PATH"' >> $GITHUB_ENV
          echo 'export CCACHE_DIR="$HOME/.ccache"' >> $GITHUB_ENV
          ccache --max-size=${{ env.CCACHE_SIZE }}
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --zero-stats
          echo "🚀 ccache configured with ${{ env.CCACHE_SIZE }} cache"

      - name: Clean existing source (if clean build requested)
        if: github.event.inputs.clean_build == 'true'
        run: |
          rm -rf openwrt
          echo "🧹 Cleaned existing OpenWrt source for fresh build"

      - name: Clone OpenWrt Source (if not cached or clean build)
        if: steps.cache-source.outputs.cache-hit != 'true' || github.event.inputs.clean_build == 'true'
        run: |
          git clone https://github.com/openwrt/openwrt.git openwrt --depth=1
          
      - name: Get OpenWrt Version Info
        run: |
          cd openwrt
          OPENWRT_VERSION=$(git describe --tags --always)
          echo "OPENWRT_VERSION=$OPENWRT_VERSION" >> $GITHUB_ENV
          echo "📦 Building OpenWrt version: $OPENWRT_VERSION"

      - name: Setup Custom Packages
        run: |
          cd openwrt
          
          # Only clone if directories don't exist
          if [ ! -d "package/luci-theme-argon" ]; then
            git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon --depth=1
          fi
          
          if [ ! -d "package/luci-app-argon-config" ]; then
            git clone https://github.com/jerrykuku/luci-app-argon-config.git package/luci-app-argon-config --depth=1
          fi
          
          # Update feeds only if not already done
          if [ ! -f "feeds.conf.default.bak" ]; then
            ./scripts/feeds update -a
            ./scripts/feeds install -a
            cp feeds.conf.default feeds.conf.default.bak
          fi

      - name: Copy Custom Configuration
        run: |
          cp .config openwrt/.config
          mkdir -p openwrt/files
          cp -r files/* openwrt/files/

      - name: Configure and Download
        working-directory: ./openwrt
        run: |
          make defconfig
          make download -j$(nproc)

      - name: Build Firmware with ccache
        working-directory: ./openwrt
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          make -j$(nproc) || make -j1 V=s

      - name: Show ccache statistics
        run: ccache --show-stats

      - name: Debug Build Output
        run: |
          echo "🔍 Checking build output directories..."
          find openwrt/bin -name "*.img.gz" -type f | head -10
          echo "📂 Available target directories:"
          ls -la openwrt/bin/targets/ || echo "No targets directory found"
          ls -la openwrt/bin/targets/bcm27xx/ || echo "No bcm27xx directory found"
          ls -la openwrt/bin/targets/bcm27xx/bcm2711/ || echo "No bcm2711 directory found"

      - name: Prepare Release Files
        run: |
          mkdir -p release
          
          # Find firmware files in build output
          FIRMWARE_DIR="openwrt/bin/targets/bcm27xx/bcm2711"
          
          echo "📂 Using firmware directory: $FIRMWARE_DIR"
          echo "🔍 All files in firmware directory:"
          ls -la "$FIRMWARE_DIR" || echo "Directory not found or empty"
          
          # Find all .img.gz files for debugging
          echo "🔍 All .img.gz files found:"
          find "$FIRMWARE_DIR" -name "*.img.gz" -type f | while read file; do
            echo "  - $(basename "$file")"
          done
          
          # Look for factory image with multiple patterns
          FACTORY_IMG=""
          
          # Try different naming patterns for factory image
          for pattern in "*squashfs-factory*.img.gz" "*rpi-4*squashfs*.img.gz" "*openwrt*rpi*squashfs*.img.gz" "*bcm2711*squashfs*.img.gz"; do
            FACTORY_IMG=$(find "$FIRMWARE_DIR" -name "$pattern" | head -1)
            if [ -n "$FACTORY_IMG" ]; then
              echo "✅ Factory image found with pattern '$pattern': $(basename "$FACTORY_IMG")"
              break
            fi
          done
          
          # If no specific factory image, use any squashfs image
          if [ -z "$FACTORY_IMG" ]; then
            FACTORY_IMG=$(find "$FIRMWARE_DIR" -name "*squashfs*.img.gz" | head -1)
            if [ -n "$FACTORY_IMG" ]; then
              echo "✅ Using squashfs image as factory: $(basename "$FACTORY_IMG")"
            fi
          fi
          
          # Copy factory image or fail
          if [ -n "$FACTORY_IMG" ]; then
            cp "$FACTORY_IMG" release/openwrt-rpi4-factory.img.gz
            echo "✅ Factory image copied as: openwrt-rpi4-factory.img.gz"
          else
            echo "❌ No factory image found! Available files:"
            ls -la "$FIRMWARE_DIR"
            exit 1
          fi
          
          # Look for sysupgrade image
          SYSUPGRADE_IMG=$(find "$FIRMWARE_DIR" -name "*sysupgrade*.img.gz" | head -1)
          if [ -n "$SYSUPGRADE_IMG" ]; then
            cp "$SYSUPGRADE_IMG" release/openwrt-rpi4-sysupgrade.img.gz
            echo "✅ Sysupgrade image copied: $(basename "$SYSUPGRADE_IMG")"
          else
            echo "⚠️ No sysupgrade image found, but continuing..."
          fi
          
          # Create build info with more details
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S UTC")
          echo "Build Date: $BUILD_DATE" > release/build-info.txt
          echo "OpenWrt Version: ${{ env.OPENWRT_VERSION }}" >> release/build-info.txt
          echo "Build ID: ${{ github.run_id }}" >> release/build-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> release/build-info.txt
          echo "Firmware Directory: $FIRMWARE_DIR" >> release/build-info.txt
          echo "Factory Image: $(basename "$FACTORY_IMG")" >> release/build-info.txt
          if [ -n "$SYSUPGRADE_IMG" ]; then
            echo "Sysupgrade Image: $(basename "$SYSUPGRADE_IMG")" >> release/build-info.txt
          fi
          
          # List final release files
          echo "📦 Final release files:"
          ls -la release/

      # Delete old releases to keep only latest ones
      - name: Clean old releases
        run: |
          # Keep only the latest 5 releases
          gh release list --limit 10 --json tagName --jq '.[5:][].tagName' | while read tag; do
            if [[ "$tag" == openwrt-rpi4-* ]]; then
              echo "🗑️ Deleting old release: $tag"
              gh release delete "$tag" --yes || echo "Failed to delete $tag"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true

      - name: Upload Firmware to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: openwrt-rpi4-$(date +"%Y%m%d-%H%M%S")-${{ github.run_id }}
          name: "🚀 OpenWrt RPi4 Build - ${{ env.OPENWRT_VERSION }} ($(date +"%Y-%m-%d %H:%M"))"
          body: |
            ## 🚀 Ultra-Fast OpenWrt Build for Raspberry Pi 4
            
            **OpenWrt Version**: `${{ env.OPENWRT_VERSION }}` (Latest Master Branch)  
            **Build Date**: $(date +"%Y-%m-%d %H:%M:%S UTC")  
            **Build ID**: `${{ github.run_id }}`  
            **Commit**: `${{ github.sha }}`
            
            ### 🎆 Features:
            - 🌐 Multi-WAN Load Balancing (mwan3)
            - 🚫 AdGuard Home (DNS-based ad blocking)
            - 📱 USB Tethering (Android & iOS)
            - 📶 WiFi Client Mode
            - 🎨 Argon Theme
            - 📈 Auto rootfs expansion
            
            ### 📥 Installation:
            1. Download **`openwrt-rpi4-factory.img.gz`** (for fresh installations)
            2. Flash to SD card using Raspberry Pi Imager or Balena Etcher
            3. Insert SD card into Raspberry Pi 4 and power on
            4. Access via http://192.168.2.1
            
            ### 🔄 Upgrade:
            - Use **`openwrt-rpi4-sysupgrade.img.gz`** for upgrading existing OpenWrt installations
            
            ### 🔑 Default Login:
            - **Username**: `root`
            - **Password**: (no password initially)
            
            ---
            🏁 **Build completed in approximately 10-15 minutes!** 🎉
          files: |
            release/openwrt-rpi4-factory.img.gz
            release/openwrt-rpi4-sysupgrade.img.gz
            release/build-info.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
