name: ðŸš€ Default Fast OpenWrt Build

on:
  # Auto trigger on push to main branch
  push:
    branches:
      - main
    # Trigger on any important file changes
    paths:
      - '.github/workflows/fast-build.yml'
      - '.config'
      - 'files/**'
      - '*.md'  # Documentation changes
      - 'scripts/**'  # Script changes

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore cache)'
        required: false
        default: 'false'
        type: boolean
      build_target:
        description: 'Build target (optional)'
        required: false
        default: 'bcm27xx/bcm2711'
        type: string

  # Auto trigger on schedule (weekly)
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

env:
  OPENWRT_BRANCH: "master"
  CACHE_VERSION: "v3"  # Updated cache version for latest builds

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Enhanced caching strategy
      - name: Cache OpenWrt Source
        id: cache-source
        uses: actions/cache@v3
        with:
          path: openwrt
          key: ${{ runner.os }}-openwrt-source-master-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-openwrt-source-master-
            ${{ runner.os }}-openwrt-source-

      - name: Cache Build Tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache
            /var/cache/apt
          key: ${{ runner.os }}-build-tools-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-tools-

      - name: Cache Downloaded Packages
        uses: actions/cache@v3
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-dl-${{ hashFiles('.config') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-dl-

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget ccache

      # Setup ccache for faster compilation
      - name: Setup ccache
        run: |
          echo 'export PATH="/usr/lib/ccache:$PATH"' >> $GITHUB_ENV
          ccache --max-size=2G
          ccache --zero-stats

      - name: Clean existing source (if clean build requested)
        if: github.event.inputs.clean_build == 'true'
        run: |
          rm -rf openwrt
          echo "ðŸ§¹ Cleaned existing OpenWrt source for fresh build"

      - name: Clone OpenWrt Source (if not cached or clean build)
        if: steps.cache-source.outputs.cache-hit != 'true' || github.event.inputs.clean_build == 'true'
        run: |
          git clone https://github.com/openwrt/openwrt.git openwrt --depth=1
          
      - name: Get OpenWrt Version Info
        run: |
          cd openwrt
          OPENWRT_VERSION=$(git describe --tags --always)
          echo "OPENWRT_VERSION=$OPENWRT_VERSION" >> $GITHUB_ENV
          echo "ðŸ“¦ Building OpenWrt version: $OPENWRT_VERSION"

      - name: Setup Custom Packages
        run: |
          cd openwrt
          
          # Only clone if directories don't exist
          if [ ! -d "package/luci-theme-argon" ]; then
            git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon --depth=1
          fi
          
          if [ ! -d "package/luci-app-argon-config" ]; then
            git clone https://github.com/jerrykuku/luci-app-argon-config.git package/luci-app-argon-config --depth=1
          fi
          
          # Update feeds only if not already done
          if [ ! -f "feeds.conf.default.bak" ]; then
            ./scripts/feeds update -a
            ./scripts/feeds install -a
            cp feeds.conf.default feeds.conf.default.bak
          fi

      - name: Copy Custom Configuration
        run: |
          cp .config openwrt/.config
          mkdir -p openwrt/files
          cp -r files/* openwrt/files/

      - name: Configure and Download
        working-directory: ./openwrt
        run: |
          make defconfig
          make download -j$(nproc)

      - name: Build Firmware with ccache
        working-directory: ./openwrt
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          make -j$(nproc) || make -j1 V=s

      - name: Show ccache statistics
        run: ccache --show-stats

      - name: Prepare Release Files
        run: |
          mkdir -p release
          cd openwrt/bin/targets/bcm27xx/bcm2711/
          
          # Copy main firmware file
          cp *-squashfs-factory.img.gz ../../../../release/openwrt-rpi4-optimized.img.gz
          
          # Copy sysupgrade file if available
          if ls *-squashfs-sysupgrade.img.gz 1> /dev/null 2>&1; then
            cp *-squashfs-sysupgrade.img.gz ../../../../release/openwrt-rpi4-sysupgrade.img.gz
          fi
          
          # Create build info
          cd ../../../../
          echo "Build Date: $(date)" > release/build-info.txt
          echo "OpenWrt Version: ${{ env.OPENWRT_VERSION }}" >> release/build-info.txt
          echo "Build ID: ${{ github.run_id }}" >> release/build-info.txt

      - name: Upload Firmware to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: openwrt-rpi4-latest-${{ github.run_id }}
          name: "OpenWrt RPi4 Latest Build - ${{ env.OPENWRT_VERSION }}"
          body: |
            ## ðŸš€ Ultra-Fast OpenWrt Build for Raspberry Pi 4
            
            **OpenWrt Version**: `${{ env.OPENWRT_VERSION }}` (Latest Master Branch)
            **Build Date**: $(date +"%Y-%m-%d %H:%M:%S UTC")
            
            ### Features:
            - Multi-WAN Load Balancing (mwan3)
            - AdGuard Home (DNS-based ad blocking)
            - USB Tethering (Android & iOS)
            - WiFi Client Mode
            - Argon Theme
            - Auto rootfs expansion
            
            ### Installation:
            1. Download `openwrt-rpi4-optimized.img.gz`
            2. Flash to SD card using Raspberry Pi Imager or Balena Etcher
            3. Access via http://192.168.2.1
            
            ### Default Login:
            - Username: root
            - Password: (no password initially)
            
            Build completed in approximately 10-15 minutes! ðŸŽ‰
          files: |
            release/openwrt-rpi4-optimized.img.gz
            release/openwrt-rpi4-sysupgrade.img.gz
            release/build-info.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
