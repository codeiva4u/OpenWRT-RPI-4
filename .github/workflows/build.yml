name: Build and Publish OpenWrt Image

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Device Model:'
        required: true
      target:
        description: 'Target Architecture:'
        visible: false
      version:
        description: 'OpenWrt Version:'
        required: true
      packages:
        description: 'Extra Packages:'
        required: false
      disabled_services:
        description: 'Disabled Services:'
        required: false
      scripts:
        description: 'UCI Defaults Scripts:'
        required: false
      customScripts:
        description: 'Custom Scripts:'
        required: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create custom scripts
        if: ${{ github.event.inputs.scripts == '99-custom' }}
        run: |
          cat <<'CUSTOM_SCRIPT_EOF' > files/etc/uci-defaults/99-custom
          ${{ github.event.inputs.customScripts }}
          CUSTOM_SCRIPT_EOF
          cat files/etc/uci-defaults/99-custom

      - name: Process UCI scripts
        run: |
          # Check if a UCI defaults script is specified by the user
          if [ -n "${{ github.event.inputs.scripts }}" ]; then
            echo "SCRIPT=${{ github.event.inputs.scripts }}" >> $GITHUB_ENV
            
            # Verify script exists
            if [ ! -f "files/etc/uci-defaults/${{ github.event.inputs.scripts }}" ]; then
              echo "Error: Specified script file does not exist."
              exit 1
            fi
            
            # Keep only the specified script
            find files/etc/uci-defaults -type f ! -name "${{ github.event.inputs.scripts }}" -delete
          else
            # Remove all UCI default scripts if none specified
            find files/etc/uci-defaults -type f -delete
            
            # Verify removal
            remaining_files=$(find files/etc/uci-defaults -type f)
            if [ -n "$remaining_files" ]; then
              echo "Warning: These files were not deleted in files/etc/uci-defaults:"
              echo "$remaining_files"
              exit 1
            else
              echo "All files in files/etc/uci-defaults have been successfully deleted."
            fi
          fi

      - name: Create build configuration
        run: |
          # Create input configuration file
          cat <<EOF > input_config
          openwrt_version=${{ github.event.inputs.version }}
          packages=${{ github.event.inputs.packages }}
          files=files
          profile=${{ github.event.inputs.model }}
          target=${{ github.event.inputs.target }}
          EOF

          # Add disabled services if specified
          if [ -n "${{ github.event.inputs.disabled_services }}" ]; then
            echo "disabled_services=${{ github.event.inputs.disabled_services }}" >> input_config
          fi

          # Export configuration to environment
          cat input_config >> $GITHUB_ENV

      - name: Inject secrets into scripts
        if: ${{ github.event.inputs.scripts }}
        run: |
          sed -i \
            -e 's/^# ssid=".*"/ssid="${{ secrets.WLAN_NAME }}"/' \
            -e 's/^# ssid_key=".*"/ssid_key="${{ secrets.WLAN_PASS }}"/' \
            -e 's/^# root_password=".*"/root_password="${{ secrets.ROOT_PASS }}"/' \
            -e 's/^# pppoe_name=".*"/pppoe_name="${{ secrets.PPPOE_NAME }}"/' \
            -e 's/^# pppoe_key=".*"/pppoe_key="${{ secrets.PPPOE_PASS }}"/' \
            files/etc/uci-defaults/${{ env.SCRIPT }}
      
      - name: Fetch version buildinfo
        id: fetch_version_buildinfo
        run: |
          version="${{ env.openwrt_version }}"
          target="${{ env.target }}"
          
          # Construct URL based on version
          if [[ $version == "SNAPSHOT" ]]; then
            url="https://downloads.openwrt.org/${version,,}s/targets/${target}/version.buildinfo"
          else
            url="https://downloads.openwrt.org/releases/${version}/targets/${target}/version.buildinfo"
          fi
          
          wget $url
          echo "version_buildinfo=$(cat version.buildinfo)" >> $GITHUB_ENV

          # Extract 7-character commit hash directly from file
          # Format: r28784-155eea44e7 -> 155eea4
          commit_hash=$(cat version.buildinfo | sed 's/.*-//' | cut -c1-7)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV
          
          # Extract revision number
          # Format: r28784-155eea44e7 -> r28784
          revision_number=$(cat version.buildinfo | sed 's/-.*//')
          echo "revision_number=$revision_number" >> $GITHUB_ENV

      - name: Build OpenWrt image via Official OpenWrt Docker imagebuilder image
        run: |
          version="${{ env.openwrt_version }}"
          target="${{ env.target }}"
          target_format=$(echo $target | tr '/' '-')

          docker run --rm -u 0 -v ${{ github.workspace }}:/workspace -w /workspace \
            ghcr.io/openwrt/imagebuilder:${target_format}-${version} \
            bash -c "/builder/setup.sh && make -j $(nproc) image \
              PROFILE='${{ env.profile }}' \
              PACKAGES='${{ env.packages }}' \
              FILES='/workspace/${{ env.files }}' \
              DISABLED_SERVICES='${{ env.disabled_services }}'"

      - name: Generate build information
        run: |
          # Format variables for display
          scripts="${{ env.SCRIPT != '' && env.SCRIPT || 'false' }}"
          disabled_services="${{ env.disabled_services != '' && env.disabled_services || 'false' }}"
          packages="${{ env.packages != '' && env.packages || 'default' }}"

          # Find target directory
          target_dir=$(find bin/targets/*/*/ -type d -print -quit)
          echo "image_path=$target_dir" >> $GITHUB_ENV

          # Extract version code from profiles.json 
          version_code=$(grep -o '"version_code":"[^"]*"' $target_dir/profiles.json | awk -F: '{print $2}' | tr -d '"')

          # Use GitHub Actions environment variables
          GITHUB_REPO="${GITHUB_REPOSITORY}"
          RELEASE_NAME="${{ github.event.inputs.model }}-${{ env.openwrt_version }}-${{ env.commit_hash }}"

          # Create build info markdown file
          cat <<EOF > build_info.md
          ## üí° Custom OpenWrt Build Information

          - **OpenWrt Version**: \`${{ env.openwrt_version }}\`
          - **Target**: \`${{ env.target }}\`
          - **Profile**: \`${{ env.profile }}\`
          - **Package Selections**: $(printf "\`%s\` " $packages)
          - **Disabled Services**: $(printf "\`%s\` " $disabled_services)
          - **Version Code**: \`$version_code\`
          - **UCI Defaults Scripts**: \`$scripts\`

          -----

          | üîê SHA256 Checksum |
          |:-------------------|
          $(awk -v repo="$GITHUB_REPO" -v tag="$RELEASE_NAME" '$2 ~ /(sysupgrade|factory|recovery)\.bin$/ {
            gsub(/\*/, "", $2); 
            printf "| `%s`<br>[%s](https://github.com/%s/releases/download/%s/%s) |\n", $1, $2, repo, tag, $2
          }' "$target_dir/sha256sums")
          EOF

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.model }}-${{ env.openwrt_version }}-${{ env.commit_hash }}
          tag_name: ${{ env.revision_number }}-${{ github.event.inputs.model }}
          body_path: build_info.md
          files: ${{ env.image_path }}/*
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
