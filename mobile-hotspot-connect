#!/bin/sh
# Mobile Hotspot Auto-Connect Service
# ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§π‡•â‡§ü‡§∏‡•ç‡§™‡•â‡§ü ‡§ë‡§ü‡•ã-‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏
# Automatically scans and connects to available mobile hotspots

SCRIPT_NAME="mobile_hotspot_connect"
PID_FILE="/var/run/${SCRIPT_NAME}.pid"
LOG_FILE="/var/log/${SCRIPT_NAME}.log"
CONFIG_FILE="/etc/mobile_hotspots.conf"
SCAN_INTERVAL=30  # seconds
MAX_RETRY=3
CURRENT_SSID=""
CURRENT_CONNECTION=""

# Logging function
log_msg() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$$] $1" >> "$LOG_FILE"
    echo "$1"
}

# Check if already running
check_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log_msg "‚ö†Ô∏è Mobile hotspot service already running (PID: $pid)"
            exit 1
        else
            rm -f "$PID_FILE"
        fi
    fi
}

# Create PID file
create_pid() {
    echo $$ > "$PID_FILE"
    log_msg "üöÄ Mobile hotspot auto-connect service started (PID: $$)"
}

# Signal handler for clean exit
cleanup() {
    log_msg "üõë Mobile hotspot service stopping..."
    rm -f "$PID_FILE"
    exit 0
}

trap cleanup TERM INT

# Initialize default hotspot configurations
init_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        log_msg "üìù Creating default mobile hotspot configuration..."
        cat > "$CONFIG_FILE" << 'EOF'
# Mobile Hotspot Configuration File
# Format: SSID|Password|Priority(1-10)
# Higher priority numbers are tried first

# Example configurations (‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§¶‡§æ‡§π‡§∞‡§£)
# AndroidAP|password123|9
# iPhone|hotspot123|8  
# Airtel_123|mobile123|7
# Jio_4G|jiopassword|6
# BSNL_WiFi|bsnlpass|5

# Add your mobile hotspot credentials here:
# YourHotspotName|YourPassword|Priority
EOF
        chmod 600 "$CONFIG_FILE"
        log_msg "üìã Default config created at $CONFIG_FILE"
        log_msg "üìù Please edit $CONFIG_FILE and add your mobile hotspot credentials"
    fi
}

# Parse configuration file
parse_config() {
    local hotspots=()
    if [ -f "$CONFIG_FILE" ]; then
        while IFS='|' read -r ssid password priority; do
            # Skip comments and empty lines
            case "$ssid" in
                \#*|'') continue ;;
            esac
            
            if [ -n "$ssid" ] && [ -n "$password" ] && [ -n "$priority" ]; then
                hotspots+=("$priority|$ssid|$password")
            fi
        done < "$CONFIG_FILE"
    fi
    
    # Sort by priority (highest first)
    printf '%s\n' "${hotspots[@]}" | sort -rn -t'|' -k1,1
}

# Scan for available WiFi networks
scan_networks() {
    log_msg "üîç Scanning for available WiFi networks..."
    
    # Enable WiFi if disabled
    uci set wireless.radio0.disabled='0'
    uci commit wireless
    wifi up
    sleep 3
    
    # Perform scan
    iw dev wlan0 scan | grep 'SSID:' | sed 's/.*SSID: //' | sort | uniq
}

# Connect to a specific hotspot
connect_hotspot() {
    local ssid="$1"
    local password="$2"
    local retry_count=0
    
    log_msg "üì± Attempting to connect to: $ssid"
    
    # Configure WiFi client interface
    uci set wireless.sta.disabled='0'
    uci set wireless.sta.ssid="$ssid"
    uci set wireless.sta.encryption='psk2'
    uci set wireless.sta.key="$password"
    uci commit wireless
    
    # Restart WiFi
    wifi down
    sleep 2
    wifi up
    sleep 5
    
    while [ $retry_count -lt $MAX_RETRY ]; do
        retry_count=$((retry_count + 1))
        log_msg "üîÑ Connection attempt $retry_count/$MAX_RETRY for $ssid"
        
        # Wait for connection
        sleep 10
        
        # Check if connected
        if check_connection; then
            CURRENT_SSID="$ssid"
            CURRENT_CONNECTION="mobile_hotspot"
            log_msg "‚úÖ Successfully connected to mobile hotspot: $ssid"
            
            # Add to bridge if in bridge mode
            if is_bridge_mode; then
                add_to_bridge "wlan0"
                log_msg "üåâ Added WiFi connection to bridge"
            fi
            
            # Update routing
            update_routing "wlan0"
            return 0
        fi
        
        log_msg "‚è≥ Waiting for connection to establish..."
        sleep 5
    done
    
    log_msg "‚ùå Failed to connect to $ssid after $MAX_RETRY attempts"
    
    # Disable station if connection failed
    uci set wireless.sta.disabled='1'
    uci commit wireless
    wifi up
    
    return 1
}

# Check if currently connected to internet
check_connection() {
    # Check if interface is up and has IP
    if ip route | grep -q "default.*wlan0"; then
        # Try to ping a reliable server
        if ping -c 2 -W 5 8.8.8.8 >/dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

# Check if system is in bridge mode
is_bridge_mode() {
    uci get network.br_master >/dev/null 2>&1
}

# Add interface to bridge
add_to_bridge() {
    local interface="$1"
    if is_bridge_mode; then
        # In bridge mode, WiFi is already connected to bridge via wireless config
        log_msg "üåâ WiFi interface automatically bridged in bridge mode"
        
        # Ensure bridge forwarding is enabled
        echo 1 > "/sys/class/net/br-br_master/bridge/forwarding" 2>/dev/null || true
    fi
}

# Update routing tables
update_routing() {
    local interface="$1"
    log_msg "üõ£Ô∏è Updating routing tables for $interface"
    
    # Add default route if not exists
    if ! ip route | grep -q "default.*$interface"; then
        # Get gateway from DHCP
        local gateway=$(ip route | grep "$interface.*scope link" | awk '{print $1}' | head -1 | sed 's|/.*||')
        if [ -n "$gateway" ]; then
            ip route add default via "$gateway" dev "$interface" metric 100 2>/dev/null || true
        fi
    fi
}

# Monitor current connection
monitor_connection() {
    if [ -n "$CURRENT_SSID" ] && [ "$CURRENT_CONNECTION" = "mobile_hotspot" ]; then
        if ! check_connection; then
            log_msg "‚ö†Ô∏è Connection to $CURRENT_SSID lost, will retry in next scan"
            CURRENT_SSID=""
            CURRENT_CONNECTION=""
            
            # Disable station mode temporarily
            uci set wireless.sta.disabled='1'
            uci commit wireless
            wifi up
        else
            log_msg "‚úÖ Connection to $CURRENT_SSID is stable"
        fi
    fi
}

# Main scanning and connection loop
main_loop() {
    log_msg "üîÑ Starting main connection loop (interval: ${SCAN_INTERVAL}s)"
    
    while true; do
        # Monitor existing connection
        monitor_connection
        
        # Skip scanning if already connected
        if [ -n "$CURRENT_SSID" ] && check_connection; then
            log_msg "üì± Already connected to $CURRENT_SSID, skipping scan"
            sleep "$SCAN_INTERVAL"
            continue
        fi
        
        log_msg "üîç Starting hotspot scan cycle..."
        
        # Get available networks
        local available_networks=$(scan_networks)
        if [ -z "$available_networks" ]; then
            log_msg "üì∂ No WiFi networks found, retrying in ${SCAN_INTERVAL}s"
            sleep "$SCAN_INTERVAL"
            continue
        fi
        
        log_msg "üìã Found networks: $(echo "$available_networks" | wc -l) total"
        
        # Try to connect to configured hotspots in priority order
        local connected=0
        while IFS='|' read -r priority ssid password; do
            if [ -n "$ssid" ]; then
                # Check if this network is available
                if echo "$available_networks" | grep -q "^$ssid$"; then
                    log_msg "üéØ Found configured hotspot: $ssid (Priority: $priority)"
                    if connect_hotspot "$ssid" "$password"; then
                        connected=1
                        break
                    fi
                fi
            fi
        done <<< "$(parse_config)"
        
        if [ $connected -eq 0 ]; then
            log_msg "üì± No configured mobile hotspots available"
        fi
        
        log_msg "‚è∞ Waiting ${SCAN_INTERVAL}s before next scan..."
        sleep "$SCAN_INTERVAL"
    done
}

# Start function
start() {
    check_running
    init_config
    create_pid
    
    log_msg "üì± Mobile Hotspot Auto-Connect Service Starting..."
    log_msg "üîß Configuration file: $CONFIG_FILE"
    log_msg "üìã Log file: $LOG_FILE"
    log_msg "‚è∞ Scan interval: ${SCAN_INTERVAL}s"
    
    main_loop
}

# Stop function
stop() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill "$pid" 2>/dev/null; then
            log_msg "üõë Mobile hotspot service stopped (PID: $pid)"
        fi
        rm -f "$PID_FILE"
    else
        log_msg "‚ö†Ô∏è Mobile hotspot service not running"
    fi
}

# Status function
status() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            echo "‚úÖ Mobile hotspot service is running (PID: $pid)"
            echo "üì± Current connection: ${CURRENT_SSID:-None}"
            echo "üìã Log file: $LOG_FILE"
            return 0
        else
            echo "‚ùå PID file exists but process not running"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        echo "‚≠ï Mobile hotspot service is not running"
        return 1
    fi
}

# Command line interface
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 2
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        echo ""
        echo "üì± Mobile Hotspot Auto-Connect Service"
        echo "üîß Configure hotspots in: $CONFIG_FILE"
        echo "üìã View logs: tail -f $LOG_FILE"
        exit 1
        ;;
esac