#!/bin/sh
# AdGuard Home Auto-Setup Script
# AdGuard Home ऑटो-सेटअप स्क्रिप्ट
# Automatically downloads, installs and configures AdGuard Home

SCRIPT_NAME="adguard_setup"
LOG_FILE="/var/log/adguard_setup.log"
ADGUARD_DIR="/opt/adguardhome"
ADGUARD_WORK_DIR="/opt/adguardhome/work"
ADGUARD_CONF_DIR="/opt/adguardhome/conf"
ADGUARD_BINARY="$ADGUARD_DIR/AdGuardHome"
ADGUARD_CONFIG="$ADGUARD_CONF_DIR/AdGuardHome.yaml"
ADGUARD_SERVICE="/etc/init.d/adguardhome"
DOWNLOAD_URL="https://github.com/AdguardTeam/AdGuardHome/releases/latest/download"
SETUP_FLAG="/etc/.adguard_setup_done"

# Architecture detection for Raspberry Pi 4
ARCH="linux_arm64"  # RPi 4 uses ARM64 when running 64-bit OpenWrt

# Logging function
log_msg() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" | tee -a "$LOG_FILE"
}

# Check if setup already done
check_setup_status() {
    if [ -f "$SETUP_FLAG" ]; then
        log_msg "🛡️ AdGuard Home already configured, skipping setup"
        exit 0
    fi
}

# Create directories
create_directories() {
    log_msg "📁 Creating AdGuard Home directories"
    mkdir -p "$ADGUARD_DIR"
    mkdir -p "$ADGUARD_WORK_DIR"
    mkdir -p "$ADGUARD_CONF_DIR"
}

# Download AdGuard Home
download_adguard() {
    log_msg "⬇️ Downloading AdGuard Home for $ARCH"
    
    # Get latest release info
    LATEST_VERSION=$(curl -s https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
    
    if [ -z "$LATEST_VERSION" ]; then
        log_msg "❌ Failed to get latest version info"
        return 1
    fi
    
    log_msg "📦 Latest version: $LATEST_VERSION"
    
    # Download the binary
    DOWNLOAD_FILE="AdGuardHome_${ARCH}.tar.gz"
    cd /tmp
    
    if wget -q "$DOWNLOAD_URL/$DOWNLOAD_FILE" -O "$DOWNLOAD_FILE"; then
        log_msg "✅ Downloaded AdGuard Home successfully"
        
        # Extract
        tar -xzf "$DOWNLOAD_FILE"
        if [ -f "AdGuardHome/AdGuardHome" ]; then
            cp "AdGuardHome/AdGuardHome" "$ADGUARD_BINARY"
            chmod +x "$ADGUARD_BINARY"
            log_msg "✅ AdGuard Home binary installed"
        else
            log_msg "❌ Failed to extract AdGuard Home binary"
            return 1
        fi
        
        # Cleanup
        rm -rf "AdGuardHome" "$DOWNLOAD_FILE"
    else
        log_msg "❌ Failed to download AdGuard Home"
        return 1
    fi
}

# Create AdGuard Home configuration
create_config() {
    log_msg "⚙️ Creating AdGuard Home configuration"
    
    cat > "$ADGUARD_CONFIG" << 'EOF'
http:
  address: 0.0.0.0:3000
  session_ttl: 720h
users:
  - name: admin
    password: $2a$10$YEe8qgzYyC9.8h8W8YWE.uV6Z6gg4nMrUhG5UhIgF5LhGfZh6rGNu  # Default: admin123
web_session_ttl: 720h
dns:
  bind_hosts:
    - 0.0.0.0
  port: 53
  statistics_interval: 1h
  query_logs_enabled: true
  query_logs_file_enabled: true
  query_logs_interval: 2160h
  query_logs_size_memory: 1000
  anonymize_client_ip: false
  protection_enabled: true
  blocking_mode: default
  blocked_response_ttl: 10
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  rewrites: []
  blocked_services: []
  upstream_dns_file: ""
  bootstrap_dns:
    - 9.9.9.10
    - 149.112.112.10
    - 2620:fe::10
    - 2620:fe::fe:10
  all_servers: false
  fastest_addr: false
  fastest_timeout: 1s
  allowed_clients: []
  disallowed_clients: []
  blocked_hosts:
    - version.bind
    - id.server
    - hostname.bind
  trusted_proxies:
    - 127.0.0.0/8
    - ::1/128
  cache_size: 4194304
  cache_ttl_min: 0
  cache_ttl_max: 0
  cache_optimistic: false
  bogus_nxdomain: []
  aaaa_disabled: false
  enable_dnssec: false
  edns_client_subnet:
    custom_ip: ""
    enabled: false
    use_custom: false
  max_goroutines: 300
  handle_ddr: true
  ipset: []
  ipset_file: ""
  upstream_dns:
    - https://dns10.quad9.net/dns-query
    - https://1.1.1.1/dns-query
    - https://8.8.8.8/dns-query
    - tls://encrypted-dns.quad9.net
    - tls://1dot1dot1dot1.cloudflare-dns.com
    - https://dns.google/dns-query
  upstream_mode: load_balance
  private_networks:
    - 127.0.0.0/8
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
    - 169.254.0.0/16
    - ::1/128
    - fc00::/7
    - fe80::/10
    - ff00::/8
  use_private_ptr_resolvers: true
  local_ptr_upstreams:
    - 192.168.1.1
tls: {}
querylog:
  enabled: true
  file_enabled: true
  interval: 2160h
  size_memory: 1000
  ignored: []
statistics:
  enabled: true
  interval: 24h
  ignored: []
filters:
  - enabled: true
    url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
    name: AdGuard DNS filter
    id: 1
  - enabled: true
    url: https://adaway.org/hosts.txt
    name: AdAway Default Blocklist
    id: 2
  - enabled: true
    url: https://www.malwaredomainlist.com/hostslist/hosts.txt
    name: MalwareDomainList.com Hosts List
    id: 3
  - enabled: true
    url: https://someonewhocares.org/hosts/zero/hosts
    name: Dan Pollock's List
    id: 4
  - enabled: true
    url: https://raw.githubusercontent.com/AdguardTeam/AdguardFilters/master/IndianFilter/sections/adservers.txt
    name: AdGuard Indian Filter
    id: 5
whitelist_filters: []
user_rules: []
dhcp:
  enabled: false
clients:
  runtime_sources:
    whois: true
    arp: true
    rdns: true
    dhcp: true
    hosts: true
  persistent: []
log_file: ""
log_max_backups: 0
log_max_size: 100
log_max_age: 3
log_compress: false
log_localtime: false
verbose: false
os:
  group: ""
  user: ""
  rlimit_nofile: 0
schema_version: 28
EOF

    log_msg "✅ AdGuard Home configuration created"
}

# Create systemd service
create_service() {
    log_msg "🔧 Creating AdGuard Home service"
    
    cat > "$ADGUARD_SERVICE" << 'EOF'
#!/bin/sh /etc/rc.common

START=99
STOP=10
USE_PROCD=1

PROG="/opt/adguardhome/AdGuardHome"
CONF_DIR="/opt/adguardhome/conf"
WORK_DIR="/opt/adguardhome/work"

start_service() {
    # Ensure directories exist
    mkdir -p "$CONF_DIR" "$WORK_DIR"
    
    procd_open_instance
    procd_set_param command "$PROG" --config "$CONF_DIR/AdGuardHome.yaml" --work-dir "$WORK_DIR"
    procd_set_param respawn 3600 5 0
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param user nobody
    procd_close_instance
}

service_triggers() {
    procd_add_reload_trigger "adguardhome"
}
EOF

    chmod +x "$ADGUARD_SERVICE"
    log_msg "✅ AdGuard Home service created"
}

# Configure firewall rules
configure_firewall() {
    log_msg "🛡️ Configuring firewall rules for AdGuard Home"
    
    # Allow AdGuard Home web interface (port 3000)
    uci add firewall rule
    uci set firewall.@rule[-1].name='Allow-AdGuard-Web'
    uci set firewall.@rule[-1].src='lan'
    uci set firewall.@rule[-1].dest_port='3000'
    uci set firewall.@rule[-1].proto='tcp'
    uci set firewall.@rule[-1].target='ACCEPT'
    
    # Allow DNS on port 53
    uci add firewall rule
    uci set firewall.@rule[-1].name='Allow-AdGuard-DNS'
    uci set firewall.@rule[-1].src='lan'
    uci set firewall.@rule[-1].dest_port='53'
    uci set firewall.@rule[-1].proto='tcp udp'
    uci set firewall.@rule[-1].target='ACCEPT'
    
    uci commit firewall
    /etc/init.d/firewall reload
    
    log_msg "✅ Firewall rules configured"
}

# Configure DHCP to use AdGuard Home
configure_dhcp() {
    log_msg "🌐 Configuring DHCP to use AdGuard Home DNS"
    
    # Set AdGuard Home as DNS server for DHCP clients
    uci set dhcp.lan.dhcp_option='6,192.168.1.1'
    uci commit dhcp
    /etc/init.d/dnsmasq restart
    
    log_msg "✅ DHCP configuration updated"
}

# Start AdGuard Home service
start_service() {
    log_msg "🚀 Starting AdGuard Home service"
    
    /etc/init.d/adguardhome enable
    /etc/init.d/adguardhome start
    
    if /etc/init.d/adguardhome status >/dev/null 2>&1; then
        log_msg "✅ AdGuard Home service started successfully"
    else
        log_msg "❌ Failed to start AdGuard Home service"
        return 1
    fi
}

# Wait for service to be ready
wait_for_service() {
    log_msg "⏳ Waiting for AdGuard Home to be ready"
    
    local retry=0
    while [ $retry -lt 30 ]; do
        if wget -q --spider http://127.0.0.1:3000 2>/dev/null; then
            log_msg "✅ AdGuard Home web interface is ready"
            return 0
        fi
        sleep 2
        retry=$((retry + 1))
    done
    
    log_msg "⚠️ AdGuard Home web interface not responding after 60 seconds"
    return 1
}

# Create setup completion flag
create_completion_flag() {
    log_msg "✅ Creating setup completion flag"
    echo "$(date): AdGuard Home setup completed successfully" > "$SETUP_FLAG"
}

# Main setup function
main_setup() {
    log_msg "🛡️ Starting AdGuard Home Auto-Setup"
    
    check_setup_status
    
    log_msg "📋 System Info: $(uname -a)"
    log_msg "🏠 Target Directory: $ADGUARD_DIR"
    log_msg "⚙️ Architecture: $ARCH"
    
    create_directories
    
    if download_adguard; then
        create_config
        create_service
        configure_firewall
        
        if start_service; then
            wait_for_service
            configure_dhcp
            create_completion_flag
            
            log_msg "🎉 AdGuard Home setup completed successfully!"
            log_msg "🌐 Web Interface: http://192.168.1.1:3000"
            log_msg "👤 Default login: admin / admin123"
            log_msg "🛡️ DNS Server: 192.168.1.1:53"
            
            return 0
        else
            log_msg "❌ Failed to start AdGuard Home service"
            return 1
        fi
    else
        log_msg "❌ Failed to download AdGuard Home"
        return 1
    fi
}

# Command line interface
case "$1" in
    install|setup)
        main_setup
        ;;
    start)
        /etc/init.d/adguardhome start
        ;;
    stop)
        /etc/init.d/adguardhome stop
        ;;
    restart)
        /etc/init.d/adguardhome restart
        ;;
    status)
        if [ -f "$SETUP_FLAG" ]; then
            echo "✅ AdGuard Home is installed and configured"
            /etc/init.d/adguardhome status
        else
            echo "❌ AdGuard Home not installed. Run: $0 install"
        fi
        ;;
    uninstall)
        echo "🗑️ Uninstalling AdGuard Home..."
        /etc/init.d/adguardhome stop 2>/dev/null || true
        /etc/init.d/adguardhome disable 2>/dev/null || true
        rm -rf "$ADGUARD_DIR" "$ADGUARD_SERVICE" "$SETUP_FLAG"
        echo "✅ AdGuard Home uninstalled"
        ;;
    *)
        echo "Usage: $0 {install|start|stop|restart|status|uninstall}"
        echo ""
        echo "🛡️ AdGuard Home Auto-Setup Script"
        echo "📋 Commands:"
        echo "   install  - Download and setup AdGuard Home"
        echo "   start    - Start AdGuard Home service"
        echo "   stop     - Stop AdGuard Home service"  
        echo "   restart  - Restart AdGuard Home service"
        echo "   status   - Check service status"
        echo "   uninstall- Remove AdGuard Home completely"
        exit 1
        ;;
esac